# Copia deployment template
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "app.fullname" . }}
  labels:
    {{- include "app.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount | default 1 }}
  revisionHistoryLimit: 2
  strategy:
    {{- if and .Values.deployment.strategy (eq .Values.deployment.strategy "Recreate") }}
    type: Recreate
    {{- else }}
    type: RollingUpdate
    rollingUpdate:
      {{- with .Values.deployment.rollingUpdate }}
      {{- toYaml . | nindent 6 }}
      {{- end }}
    {{- end }}
  selector:
    matchLabels:
      {{- include "app.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/config: {{ toJson .Values.deployment.configmap | sha256sum }}
        checksum/secret: {{ toJson .Values.copia.config | sha256sum }}
        {{- with .Values.copia.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        {{- include "app.labels" . | nindent 8 }}
        {{- if .Values.deployment.labels }}
        {{- toYaml .Values.deployment.labels | nindent 8 }}
        {{- end }}
    spec:
      {{- if .Values.schedulerName }}
      schedulerName: "{{ .Values.schedulerName }}"
      {{- end }}
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.deployment.serviceAccountName }}
      serviceAccountName: "{{ .Values.deployment.serviceAccountName }}"
      {{- end }}
      securityContext:
        fsGroup: 1000
      terminationGracePeriodSeconds: {{ .Values.deployment.terminationGracePeriodSeconds }}
      {{- if .Values.copia.config }}
      initContainers:
        {{- if and .Values.copia.config .Values.deployment.preflight }}
        - name: {{ .Chart.Name }}-init
          image: postgres:latest
          imagePullPolicy: Always
          command: ['psql', '-c', '\q']
          resources:
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 100m
              memory: 128Mi
          env:
            - name: PGHOST
              value: {{ .Values.copia.config.database.HOST }}
            - name: PGUSER
              value: {{ .Values.copia.config.database.USER }}
            - name: PGPASSWORD
              value: {{ .Values.copia.config.database.PASSWD }}
            - name: PGDATABASE
              value: {{ .Values.copia.config.database.NAME }}
        {{- end }}
        {{- if .Values.copia.config }}
        - name: {{ .Chart.Name }}-config-merge
          image: python:3.13-alpine
          imagePullPolicy: Always
          command:
            - /bin/sh
            - -c
            - |
              #!/bin/sh
              set -e
              
              # Install deps
              apk add --no-cache git
              pip install \
                git+https://github.com/candlepin/python-iniparse.git@0f3da0a21e933e4a7327fd6a2b8e2218315df0ef#egg=iniparse \
                git+https://github.com/pixelb/crudini.git@f3811bc0b2c19be373d0cdaf85378c823ecc8187#egg=crudini
              
              # Create directory if it doesn't exist
              mkdir -p "$(dirname '{{ .Values.deployment.configmap.GITEA_APP_INI }}')"
              
              # Check for existing app.ini
              if [ -f "{{ .Values.deployment.configmap.GITEA_APP_INI }}" ]; then
                echo "Existing app.ini found, merging with secret content..."
                crudini --merge "{{ .Values.deployment.configmap.GITEA_APP_INI }}" < /tmp/app.ini
                echo "app.ini merge completed successfully"
              else
                echo "No existing app.ini found, copying secret content..."
                cp /tmp/app.ini "{{ .Values.deployment.configmap.GITEA_APP_INI }}"
              fi
              
              echo "app.ini ready at {{ .Values.deployment.configmap.GITEA_APP_INI }}"
          volumeMounts:
            # Mount only the app.ini file from the copia data volume
            - name: data
              mountPath: {{ .Values.deployment.configmap.GITEA_APP_INI }}
              subPath: {{ trimPrefix .Values.deployment.configmap.GITEA_WORK_DIR .Values.deployment.configmap.GITEA_APP_INI | trimPrefix "/" }}
            - name: temp-config
              mountPath: /tmp/app.ini
              subPath: app.ini
        {{- end }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ include "app.image" . }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - gitea
          env:
            {{- if .Values.signing.enabled }}
            - name: GNUPGHOME
              value: {{ .Values.signing.gpgHome }}
            {{- end }}
            {{- if .Values.deployment.env }}
            {{- toYaml .Values.deployment.env | nindent 12 }}
            {{- end }}
          envFrom:
            - configMapRef:
                name: {{ include "app.fullname" . }}-configmap
          ports:
            - name: ssh
              containerPort: {{ .Values.deployment.configmap.SSH_LISTEN_PORT }}
            - name: http
              containerPort: {{ .Values.copia_server_http_port }}
              {{- if .Values.deployment.configmap.ENABLE_PPROF }}
            - name: profiler
              containerPort: {{ .Values.deployment.configmap.PPROF_PORT }}
              {{- end }}
          lifecycle:
            preStop:
              exec:
                command: [
                  "sh", "-c",
                  "sleep 10 && /usr/local/bin/gitea manager shutdown",
                ]
          {{- if .Values.copia.livenessProbe.enabled }}
          livenessProbe:
            tcpSocket:
              port: http
            initialDelaySeconds: {{ .Values.copia.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.copia.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.copia.livenessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.copia.livenessProbe.successThreshold }}
            failureThreshold: {{ .Values.copia.livenessProbe.failureThreshold }}
          {{- else if .Values.copia.customLivenessProbe }}
          livenessProbe:
            {{- toYaml .Values.copia.customLivenessProbe | nindent 12 }}
          {{- end }}
          {{- if .Values.copia.readinessProbe.enabled }}
          readinessProbe:
            tcpSocket:
              port: http
            initialDelaySeconds: {{ .Values.copia.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.copia.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.copia.readinessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.copia.readinessProbe.successThreshold }}
            failureThreshold: {{ .Values.copia.readinessProbe.failureThreshold }}
          {{- else if .Values.copia.customReadinessProbe }}
          readinessProbe:
            {{- toYaml .Values.copia.customReadinessProbe | nindent 12 }}
          {{- end }}
          {{- if .Values.copia.startupProbe.enabled }}
          startupProbe:
            tcpSocket:
              port: http
            initialDelaySeconds: {{ .Values.copia.startupProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.copia.startupProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.copia.startupProbe.timeoutSeconds }}
            successThreshold: {{ .Values.copia.startupProbe.successThreshold }}
            failureThreshold: {{ .Values.copia.startupProbe.failureThreshold }}
          {{- else if .Values.copia.customStartupProbe }}
          startupProbe:
            {{- toYaml .Values.copia.customStartupProbe | nindent 12 }}
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          volumeMounts:
            - name     : temp
              mountPath: {{ .Values.deployment.configmap.GITEA_TEMP }}
            - name     : data
              mountPath: {{ .Values.deployment.configmap.GITEA_WORK_DIR }}
            {{- if .Values.extraVolumeMounts }}
            {{- toYaml .Values.extraVolumeMounts | nindent 12 }}
            {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      volumes:
        {{- if (hasKey .Values.copia "config") }}
        - name: temp-config
          secret:
            secretName: {{ include "app.fullname" . }}-ini
        {{- end }}
        {{- if .Values.extraVolumes }}
        {{- toYaml .Values.extraVolumes | nindent 8 }}
        {{- end }}
        - name: temp
          emptyDir: {}
  {{- if and .Values.persistence.enabled .Values.persistence.existingClaim }}
        - name: data
          persistentVolumeClaim:
  {{- with .Values.persistence.existingClaim }}
            claimName: {{ tpl . $ }}
  {{- end }}
  {{- else if not .Values.persistence.enabled }}
        - name: data
          emptyDir: {}
  {{- else if and .Values.persistence.enabled (not .Values.persistence.existingClaim) }}
        - name: data
          persistentVolumeClaim:
            claimName: {{ include "app.fullname" . }}-data
  {{- end }}
